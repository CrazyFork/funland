/*!
 * Copyright (c) 2018 by The Funland Project Developers.
 * Some rights reserved.
 *
 * Licensed under the MIT License.
 * See LICENSE file in the project root for full license information.
 */

/* @flow */

import type { HK } from "../../src"
import { Setoid, Functor, Apply, Applicative, Chain, Monad, ChainRec } from "../../src"

type Either<L, R> = Left<L> | Right<R>
type Left<L> = { tag: "left", value: L }
type Right<R> = { tag: "right", value: R }

function left<L, R>(value: L): Either<L, R> {
  return { tag: "left", value }
}

function right<L, R>(value: R): Either<L, R> {
  return { tag: "right", value }
}

type BoxURI = <U, L, A>(x: [U, L, A]) => Box<A>
type BoxK<A> = HK<BoxURI, A>

class Box<+A> {
  +value: A;
  constructor(value: A) { this.value = value }
}

class BoxFunctor implements Setoid<Box<any>>, Functor<BoxURI> {
  equals(x, y): boolean {
    return (x : Box<any>).value === (y : Box<any>).value
  }

  map<A, B>(f: (a: A) => B, fa: BoxK<A>): Box<B> {
    return new Box(f((fa : any).value))
  }
}

class BoxApply extends BoxFunctor implements Apply<BoxURI> {
  ap<A, B>(ff: BoxK<(a: A) => B>, fa: BoxK<A>): Box<B> {
    const f = (ff : any).value
    const a = (fa : any).value
    return new Box(f(a))
  }
}

class BoxApplicative extends BoxApply implements Applicative<BoxURI> {
  of<A>(a: A): BoxK<A> { return new Box(a) }
}

class BoxChain extends BoxApply implements Chain<BoxURI> {
  chain<A, B>(f: (a: A) => BoxK<B>, fa: BoxK<A>): BoxK<B> {
    return f((fa : any).value)
  }
}

class BoxChainRec extends BoxChain implements ChainRec<BoxURI> {
  chainRec<A, B>(
    f: (next: (a: A) => Either<A, B>, done: (b: B) => Either<A, B>, a: A) => BoxK<Either<A, B>>,
    a: A): BoxK<B> {

    let cursor: Either<A, B> = left(a)
    while (cursor.tag === "left") {
      cursor = (f(left, right, cursor.value) : any).value
    }
    return new Box(cursor.value)
  }
}

class BoxMonad extends BoxApplicative implements Monad<BoxURI> {
  chain<A, B>(f: (a: A) => BoxK<B>, fa: BoxK<A>): BoxK<B> {
    return f((fa : any).value)
  }
}
