/*!
 * Copyright (c) 2018 by The Funland Project Developers.
 * Some rights reserved.
 *
 * Licensed under the MIT License.
 * See LICENSE file in the project root for full license information.
 */

/* @flow */

import type { HK } from "funland"
import { Applicative } from "funland"
import { Equiv } from "./equiv"
import { ApplyLaws } from "./apply"

declare export class ApplicativeLaws<F> extends ApplyLaws<F> {
  +F: Applicative<F>;
  constructor(F: Applicative<F>): Applicative<F>;
  applicativeIdentity<A>(fa: HK<F, A>): Equiv<HK<F, A>>;
  applicativeHomomorphism<A, B>(a: A, f: (a: A) => B): Equiv<HK<F, B>>;
  applicativeInterchange<A, B>(a: A, ff: HK<F, (a: A) => B>): Equiv<HK<F, B>>;
  applicativeMap<A, B>(fa: HK<F, A>, f: (a: A) => B): Equiv<HK<F, B>>;
}
